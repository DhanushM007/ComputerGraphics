1.


Program to demonstrate mouse event handling function
#include<stdio.h> 
#include<stdlib.h> 
#include<GL/glut.h>
int wh = 500, ww = 500; float siz = 3;
void myinit()
{
    
    
    gluOrtho2D(0, wh, 0, ww);// xmin, xmax, ymin, ymax    
    
}
void drawsq(int x, int y)
{
    y = wh - y;
    glColor3f(1, 0, 0);
    glBegin(GL_POLYGON);
    glVertex2f(x + siz, y + siz);
    glVertex2f(x - siz, y + siz);
    glVertex2f(x - siz, y - siz);
    glVertex2f(x + siz, y - siz);
    glEnd();
    glFlush();
}
void display()
{
    glClearColor(1, 1, 1, 1);
    glClear(GL_COLOR_BUFFER_BIT);
}
void myMouse(int button, int state, int x, int y)
{
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
        drawsq(x, y);
    if (button == GLUT_RIGHT_BUTTON && state == GLUT_DOWN)
        exit(0);
}
int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);
    glutInitWindowSize(wh, ww);
    glutCreateWindow("square");
    glutDisplayFunc(display);
    glutMouseFunc(myMouse);
    myinit();
    glutMainLoop();
}



2.


Lab Pgm 1: Develop a program to draw a line using Bresenhamâ€™s line drawing technique
#include <GL/glut.h>
#include <cmath>

void setPixel(int x, int y) {
    glBegin(GL_POINTS);
    glVertex2i(x, y);
    glEnd();
}

void lineBres(int x0, int y0, int xEnd, int yEnd) {
    int dx = fabs(xEnd - x0), dy = fabs(yEnd - y0);
    int p = 2 * dy - dx;
    int twoDy = 2 * dy, twoDyMinusDx = 2 * (dy - dx);
    int x, y;

    if (x0 > xEnd) {
        x = xEnd;
        y = yEnd;
        xEnd = x0;
    }
    else {
        x = x0;
        y = y0;
    }

    setPixel(x, y);
    while (x < xEnd) {
        x++;
        if (p < 0)
            p += twoDy;
        else {
            y++;
            p += twoDyMinusDx;
        }
        setPixel(x, y);
    }
}

void display() {
    glClearColor(0.0, 0.0, 0.0, 0.0); // Black background
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(1.0, 1.0, 1.0); // White color

    // Define line coordinates
    int x0 = 50, y0 = 100;
    int xEnd = 200, yEnd = 300;

    lineBres(x0, y0, xEnd, yEnd);

    glFlush();
}

void init() {
    
    //glMatrixMode(GL_PROJECTION);
    gluOrtho2D(0.0, 500.0, 0.0, 500.0); // Set the window coordinates
}

int main(int argc, char **argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500); // Set the window size
    glutInitWindowPosition(100, 100); // Set the window position
    glutCreateWindow("Bresenham Line Drawing"); // Create the window
        init();
    glutDisplayFunc(display); // Register the display function
    glutMainLoop();
    return 0;
}



3.

Mouse event handling function to change the color of the square based on mouse button clicked
#include <GL/glut.h>

// Initial rectangle color
float red = 1.0, green = 1.0, blue = 1.0;

// Function to display the rectangle
void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(red, green, blue);
    glBegin(GL_QUADS);
    glVertex2f(-0.5, -0.5);
    glVertex2f(0.5, -0.5);
    glVertex2f(0.5, 0.5);
    glVertex2f(-0.5, 0.5);
    glEnd();
    glFlush();
}
void init()
{
    gluOrtho2D(-1, 1, -1, 1);
}
// Function to handle mouse events
void mouse(int button, int state, int x, int y) {
    if (state == GLUT_DOWN) {
        switch (button) {
        case GLUT_LEFT_BUTTON:
            red = 1.0;
            green = 0.0;
            blue = 0.0;
            break;
        case GLUT_MIDDLE_BUTTON:
            red = 0.0;
            green = 1.0;
            blue = 0.0;
            break;
        case GLUT_RIGHT_BUTTON:
            red = 0.0;
            green = 0.0;
            blue = 1.0;
            break;
        }
        glutPostRedisplay();  // Request a redraw
    }
}

int main(int argc, char** argv) {
    
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutCreateWindow("Mouse Event Handling");

    // Set the clear color to white
    glClearColor(1.0, 1.0, 1.0, 1.0);
    
   init();
    // Register callback functions
    glutDisplayFunc(display);
    glutMouseFunc(mouse);
    

    // Enter the GLUT event loop
    glutMainLoop();
    return 0;
}